# library(pheatmap)
# library(tidyverse)
# library(readxl)
# library(RColorBrewer)
# setwd("~/Desktop")
# getwd()
# ?read.table
# annotation_table= read.table("./input/Literature_HeatMap_Data_anno.txt")
# Taxa<-read_xlsx("./input/Literature_HeatMap_Data_Ivan.xlsx", sheet = 1, col_names = TRUE)
# Taxa<-read.table("./input/Literature_HeatMap_Data_reduced.txt")
# Taxa<-read.table("HumanIBDStudies.txt")
# read_
# ann_colors = list(
#   Gender = c(Less="#3399FF", More="#cc6666", Unknown="#f4fcfc"), 
#   Sample_Type = c(Biopsy="#efe9d0", Stool="#ccbb74", Stool_Biopsy="#bc5607"),
#   Sample_Size = c(LessThanFifty="#cff7d5",Between50_100="#a5f7b0", Between101_200="#78e887", MoreThan200="#47a354"),
#   Median_Age = c(BetweenTenTwenty="#e1e8f4",BetweenThirtyFourty="#c1d3f2", BetweenThirtyFifty="#94b6ef", BetweenFiftySeventy="#6d98e0", Unknown="#f4fcfc"),
#   RaceEthnicity = c(MostlyCaucasian="#aaf2ff", Indian="brown", Japanese="#e5f98b", Han= "#efb94c", Korean = "#cc6666", Unknown="#f4fcfc"),
#   Method = c(RT_PCR="#e9e3ef", R454="#c3a9e5",  MiSeq="#a276db", HiSeq="#7b45c1", Other="#f4fcfc"))
# 
# ann_colors = list(
#   Gender = c(Less="#3399FF", More="#cc6666", Unknown="#f4fcfc"), 
#   Sample_Type = c(Biopsy="#efe9d0", Stool="#ccbb74", Stool_Biopsy="#bc5607"),
#   Sample_Size = c(Human="#efe9d0",Dog="#ccbb74", Cat="#ce8852", Mice="#bc5607"),
#   Median_Age = c(Young="#97edd0", Adult="#378e71", Old="#215e4a", Unknown="#f4fcfc"),
#   RaceEthnicity = c(MostlyCaucasian="#aaf2ff", Indian="brown", Japanese="#e5f98b", Han= "#efb94c", Korean = "#cc6666", Unknown="#f4fcfc"),
#   Species=c(Human="#efe9d0",Dog="#ccbb74", Cat="#ce8852", Mice="#bc5607"),
#   Type=c(Natural="#aaf2ff", Chemical="#cc6666", Genetic="#e5f98b", Chemical_Genetic ="#efb94c", Other="#f4fcfc"),
#   Method = c(FISH="#d0eaef", R454="#aaf2ff", RT_PCR="#3399FF", MiSeq="#efb94c", HiSeq="#cc6666", Other="#f4fcfc"))
# 
# pheatmap(Taxa, 
#          fontsize_row = 8, fontsize_col = 5, cluster_cols = TRUE, cluster_rows = TRUE,
#          color = colorRampPalette(rev(rwbcols))(100),
#          cellwidth = 4, cellheight = 12,
#          annotation_col=annotation_table,annotation_colors = ann_colors, border_color = "grey60")
# 
# rwbcols <- c("#D33F6A","#E07B91","#E6AFB9","#f4fcfc","#B5BBE3", "#8595E1", "#4A6FE3")
# pheatmap(Taxa, 
#          fontsize_row = 8, fontsize_col = 5, cluster_cols = TRUE, cluster_rows = FALSE,
#          color = colorRampPalette(rev(rwbcols))(100),
#          cellwidth = 4, cellheight = 12,
#          annotation_col=annotation_table,annotation_colors = ann_colors, border_color = "grey60")
# 
# rwbcols <- c("#D33F6A","#E07B91","#E6AFB9","#ffffff","#B5BBE3", "#8595E1", "#4A6FE3")
# 
# pheatmap(Taxa, 
#          fontsize_row = 8, fontsize_col = 5, cluster_cols = TRUE, cluster_rows = TRUE,
#          color = colorRampPalette(rev(rwbcols))(100),
#          cellwidth = 4, cellheight = 12,
#          )

# install.packages("complexheatmap")

library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
# library(complexheatmap)  # For clustering, if needed

# Assuming rwbcols is defined
rwbcols <- brewer.pal(3, "RdBu")

# 1. Convert Taxa to long format
Taxa_long <- Taxa %>%
  rownames_to_column("RowNames") %>%
  pivot_longer(cols = -RowNames, names_to = "ColumnName", values_to = "Value")

# 2. (Optional) Perform clustering - if you decide to handle clustering separately
# This is an example using hclust for column clustering and not row clustering
# Skip this part if clustering is not needed or apply as needed
Taxa_dist <- dist(t(Taxa))  # Transpose for column clustering
Taxa_hclust <- hclust(Taxa_dist)
Taxa_long$ColumnName <- factor(Taxa_long$ColumnName, levels = colnames(Taxa)[Taxa_hclust$order])

# 3. Create the plot
p <- ggplot(Taxa_long, aes(x = ColumnName, y = RowNames, fill = Value)) +
  geom_tile() +
  scale_fill_gradientn(colors = colorRampPalette(rev(rwbcols))(100)) +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 5, angle = 45, hjust = 1),
        axis.text.y = element_text(size = 8),
        axis.title = element_blank()) +
  labs(fill = "Value") +
  coord_fixed(ratio = 12 / 7)  # Adjust ratio based on cellheight and cellwidth

# Print the plot
print(p)


Taxa<-read_xlsx("./../input/Literature_HeatMap_Data_Ivan3.xlsx", sheet = 1, col_names = T)
Taxa <- tibble::column_to_rownames(Taxa, var = names(Taxa)[1])

annotation_table <- read_xlsx("./../input/Literature_HeatMap_Data_Ivan3.xlsx", sheet = 2)
annotation_table <- tibble::column_to_rownames(annotation_table, var = names(annotation_table)[1])

# Define your color palettes and the rwbcols
rwbcols <- brewer.pal(3, "RdBu")

# Prepare Taxa data
Taxa_long <- Taxa %>%
  rownames_to_column("RowNames") %>%
  pivot_longer(cols = -RowNames, names_to = "ColumnName", values_to = "Value")

### Prepare annotation data color scheme
ann_colors <- list(Less="#3399FF", More="#cc6666", Unknown="#f4fcfc", Biopsy="#efe9d0", 
Stool="#ccbb74", Stool_Biopsy="#bc5607", LessThanFifty="#cff7d5", Between50_100="#a5f7b0", 
Between101_200="#78e887", MoreThan200="#47a354", 
BetweenTenTwenty="#e1e8f4", 
BetweenThirtyFourty="#c1d3f2", 
BetweenThirtyFifty="#94b6ef", BetweenFiftySeventy="#6d98e0", NotKnown="#f4fcfc", 
MostlyCaucasian="#aaf2ff",
Indian="brown", Japanese="#e5f98b", Han= "#efb94c", Korean = "#cc6666", Not_known="#f4fcfc", 
RT_PCR="#e9e3ef", R454="#c3a9e5",  MiSeq="#a276db", HiSeq="#7b45c1", Other="#f4fcfc")

# Prepare Annotations data
annotation_table_long <- annotation_table %>%
  rownames_to_column("Publication") %>%
  pivot_longer(cols = -Publication, names_to = "Parameter", values_to = "Value")

# Flatten the list of vectors into a single named vector for use in ggplot
all_colors <- unlist(ann_colors)

# Ensure that the 'Value' column is a factor and its levels are in the order of 'all_colors'
annotation_table_long$Value <- factor(annotation_table_long$Value, levels = names(all_colors))

# Plotting main heatmap
p1 <- ggplot(Taxa_long, aes(x = ColumnName, y = RowNames, fill = Value)) +
  geom_tile(width = 1.2, height = 1.2,color = "black") +
  scale_fill_gradientn(colors = colorRampPalette(rev(rwbcols))(100)) +
  theme_minimal() +
  theme(
    plot.margin = unit(c(0, 0, 0, 2), "cm"),  # Adjust margins around the plot
    axis.text.x = element_text(size = 5, angle = 45, hjust = 1),
        axis.text.y = element_text(size = 6),
        axis.title = element_blank(),
        legend.title = element_text(size = 7),  # Smaller legend title
        legend.text = element_text(size = 5),  # Smaller legend text
        legend.key.size = unit(0.3, "cm")) +  # Smaller legend keys
  coord_fixed(ratio = 12 / 7) +  # Adjust ratio based on cellheight and cellwidth
  scale_y_discrete(position = "right")  # Position the y-axis on the right

p1

# Plotting the annotation data with customized axis labels

p2 <- ggplot(annotation_table_long, aes(x = Publication, y = Parameter, fill = Value)) +
  geom_tile(width = 1.2, height = 0.8,color = "black") +  # Width is larger than height
  scale_fill_manual(values = all_colors) +  # Use the flattened color vector
  theme_void() +  # Start with a blank theme
  theme(
    plot.margin = unit(c(0, 4, 0, 0), "cm"),  # Adjust margins around the plot
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1, size = 5, color = "black"),  # Customize x axis labels
    axis.text.y = element_text(angle = 0, hjust = 1, size = 6, color = "black"),  # Customize y axis labels
    axis.title.x = element_text(size = 8, face = "bold"),  # X-axis title
    axis.title.y = element_text(size = 8, face = "bold"),   # Y-axis title
    legend.title = element_text(size = 7),  # Smaller legend title
    legend.text = element_text(size = 5),  # Smaller legend text
    legend.key.size = unit(0.1, "cm")  # Smaller legend keys
  ) +
  labs(
    x = "Number of publication",  # Rename X axis
    y = "",  # Rename Y axis
    fill = "Annotation legend"  # Legend title
  ) +
  coord_fixed(ratio = 1.5) +  # Adjust ratio based on cellheight and cellwidth
  scale_x_discrete(position = "top")  # Position the x-axis at the top


# Arrange plots including annotations (simple vertical arrangement example)
grid.arrange(p2, p1, ncol = 1, heights = c(1, 4))
